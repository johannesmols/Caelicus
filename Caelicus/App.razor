@inject AppState AppState
@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@using LatLng = Caelicus.Services.LatLng
@implements IDisposable
@inject IJSRuntime JSruntime

<Router AppAssembly="@typeof(Program).Assembly">
    <Found Context="routeData">
        <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
    </Found>
    <NotFound>
        <LayoutView Layout="@typeof(MainLayout)">
            <p>Sorry, there's nothing at this address.</p>
        </LayoutView>
    </NotFound>
</Router>

@code
{
    public List<JsonGraphRootObject> Graphs;
    public List<Tuple<string, Dictionary<Route, RouteStats>>> GraphStats;
    public List<Vehicle> Vehicles;

    private const string StateKeyAppendix = "_stats";

    private LocalStorageService _localStorageService;

    protected override async Task OnInitializedAsync()
    {
        // Register app state changed event
        AppState.StateChanged += async (source, property) => await AppState_StateChanged(source, property);

        _localStorageService = new LocalStorageService(LocalStorage);

        GoogleMapsDistanceService.Init(JSruntime);

        await LoadGraphs();
        //await LoadGraphStats();
        await LoadVehicles();
    }

    private async Task LoadGraphs()
    {
        // Retrieve locally stored graphs
        Graphs = await _localStorageService.GetLocalStorageGraphs();

        // Read graph files from data folder and add if not already cached in browser
        var localGraphs = new[] { "data/graphs/copenhagen.json", "data/graphs/scenario1.json", "data/graphs/scenario2.json", "data/graphs/scenario3.json" };
        foreach (var localGraph in localGraphs)
        {
            try
            {
                var graph = await Http.GetFromJsonAsync<JsonGraphRootObject>(localGraph);

                if (Graphs.All(x => x.Name != graph.Name))
                {
                    Graphs.Add(graph);
                }
                else
                {
                    Console.WriteLine($"Already cached { localGraph } in local storage or path invalid, ignoring.");
                }
            }
            catch
            {
                Console.WriteLine($"Error parsing { localGraph } to object, ignoring.");
            }
        }

        // Update app state and write to local storage
        AppState.UpdateGraphs(this, Graphs);
        await _localStorageService.WriteGraphsToLocalStorage(AppState.Graphs);
    }

    private async Task LoadGraphStats()
    {
        GraphStats = await _localStorageService.GetLocalStorageGraphStats();

        foreach (var graph in AppState.Graphs.Where(graph => GraphStats.All(g => g.Item1 != graph.Name + Constants.Constants.GraphStatsKeyAppendix)))
        {
            GraphStats.Add(Tuple.Create(graph.Name + Constants.Constants.GraphStatsKeyAppendix, await GenerateGraphStats(graph)));
            GoogleMapsDistanceService.Reset();
        }

        Console.WriteLine("graph stats: " + JsonConvert.SerializeObject(GraphStats));

        AppState.UpdateGraphStats(this, GraphStats);
        GraphStats.ForEach(async g => await _localStorageService.WriteGraphStatsToLocalStorage(g.Item1, g.Item2));
    }

    private async Task<Dictionary<Route, RouteStats>>  GenerateGraphStats(JsonGraphRootObject jsonGraph)
    {
        var graph = GraphImporterService.GenerateGraph(jsonGraph);

        var origins = new List<LatLng>();
        var destinations = new List<LatLng>();

        foreach (var vertex in graph.Vertices)
        {
            origins.Add(new LatLng(vertex.Info.Position.Item1, vertex.Info.Position.Item2));
            destinations.Add(new LatLng(vertex.Info.Position.Item1, vertex.Info.Position.Item2));
        }

        foreach (var travelMode in (TravelMode[]) Enum.GetValues(typeof(TravelMode)))
        {
            await GoogleMapsDistanceService.CalculateDistances(travelMode, origins, destinations);
        }

        return GoogleMapsDistanceService.GetRouteDictionary();
    }

    private async Task LoadVehicles()
    {
        // Retrieve locally stored vehicles
        Vehicles = await _localStorageService.GetLocalVehicles();

        // Read vehicle file from data folder and add if not already cached in browser
        try
        {
            var jsonString = await Http.GetStringAsync("data/vehicles/vehicles.json");
            Vehicles = JsonConvert.DeserializeObject<List<Vehicle>>(jsonString, new Newtonsoft.Json.Converters.StringEnumConverter());

            // Write vehicles to local storage and update app state
            AppState.UpdateVehicles(this, (Vehicles ?? new List<Vehicle>()).Select(vehicle => Tuple.Create(vehicle, false, 1, 1, 1)).ToList());
            await _localStorageService.WriteVehiclesToLocalStorage(AppState.Vehicles);
        }
        catch (Exception e)
        {
            Console.WriteLine($"Error while parsing vehicles Json file. Please verify it. Error: " + e.Message);
        }
    }

    private async Task AppState_StateChanged(ComponentBase source, string property)
    {
        if (source != this)
        {
            await InvokeAsync(StateHasChanged);
        }
    }

    void IDisposable.Dispose()
    {
        Http?.Dispose();
        AppState.StateChanged -= async (source, property) => await AppState_StateChanged(source, property);
    }
}
