@page "/results"
@inject AppState AppState
@inject TimerService Timer
@implements IDisposable

<div class="container-fluid h-100">
    <div class="row" style="margin-bottom: 20px">
        <div class="col-md-6">
            <FileUploader/>
        </div>
    </div>

    <div class="row" style="margin-bottom: 20px">
        <div class="col-md-6">
            <strong>Simulation ID:</strong> @AppState.CurrentSimulationHistory.Parameters.SimulationIdentifier
        </div>
        <div class="col-md-6">
            <strong>Random Seed:</strong> @AppState.CurrentSimulationHistory.Parameters.RandomSeed
        </div>
    </div>

    <div class="row" style="margin-bottom: 20px">
        <div class="col-12">
            <form class="form-inline">
                <div class="form-group pb-3" style="width: 100%">
                    <button type="button" class="btn btn-primary" style="margin-right: 10px" @onclick="PlayClicked">
                        @(_playing ? "Pause" : "Play")
                    </button>
                    <label for="steps" style="margin-right: 10px">@_simStep/@(AppState.CurrentSimulationHistory.Steps.Count == 0 ? 0 : AppState.CurrentSimulationHistory.Steps.Count - 1)</label>
                    <input class="form-control" type="range" id="steps" style="flex: 1" min="0" max="@(AppState.CurrentSimulationHistory.Steps.Count - 1)" value="@_simStep" @onchange="SimStepChanged">
                </div>
            </form>
        </div>
    </div>

    <div class="row" style="margin-bottom: 20px">
        <div class="col-4 border border-secondary">
            <div style="text-align: center">
                <strong>Vehicles</strong>
            </div>
        </div>
        <div class="col-4 border border-secondary">
            <div style="text-align: center">
                <strong>Open Orders</strong>
            </div>
        </div>
        <div class="col-4 border border-secondary">
            <div style="text-align: center">
                <strong>Closed Orders</strong>
            </div>
        </div>
    </div>

    <div class="row" style="margin-bottom: 20px">
        <div class="col-12 border border-secondary">
            <div style="text-align: center">
                <strong>Map</strong>
            </div>
        </div>
    </div>

    <div class="row" style="margin-bottom: 20px">
        <div class="col-12 border border-secondary">
            <div style="text-align: center">
                <strong>Graphs / Stats</strong>
            </div>
        </div>
    </div>
</div>

@code {
    private int _simStep = 0;
    private bool _playing = false;

    protected override async Task OnInitializedAsync()
    {
        // Register app state changed event
        AppState.StateChanged += async (source, property) => await AppState_StateChanged(source, property);

        StartTimer();
    }

    private void StartTimer()
    {
        Timer.SetTimer(1000, repeat: true);
        Timer.OnElapsed += IncrementStep;
    }

    private void IncrementStep()
    {
        if (_playing)
        {
            if (_simStep == AppState.CurrentSimulationHistory.Steps.Count - 1)
            {
                _playing = false;
            }
            else
            {
                _simStep++;
            }

            StateHasChanged();
        }
    }

    private void SimStepChanged(ChangeEventArgs e)
    {
        _simStep = int.Parse(e.Value.ToString());
    }

    private void PlayClicked(MouseEventArgs e)
    {
        if (_simStep == AppState.CurrentSimulationHistory.Steps.Count - 1)
        {
            _simStep = 0;
        }

        _playing = !_playing;
    }

    private async Task AppState_StateChanged(ComponentBase source, string property)
    {
        if (source != this)
        {
            await InvokeAsync(StateHasChanged);
        }
    }

    void IDisposable.Dispose()
    {
        AppState.StateChanged -= async (source, property) => await AppState_StateChanged(source, property);
        Timer?.Dispose();
    }
}
