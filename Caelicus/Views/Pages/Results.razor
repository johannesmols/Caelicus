@page "/results"
@inject AppState AppState
@inject TimerService Timer
@implements IDisposable

<div class="container-fluid h-100">
    <div class="row" style="margin-bottom: 20px">
        <div class="col-md-6">
            <FileUploader/>
        </div>
    </div>

    <div class="row" style="margin-bottom: 20px">
        <div class="col">
            <strong>Simulation ID:</strong> @AppState.SimulationHistory.Parameters.SimulationIdentifier
        </div>
        <div class="col">
            <strong>Random Seed:</strong> @AppState.SimulationHistory.Parameters.RandomSeed
        </div>
        <div class="col">
            <strong>Min-Max Payload:</strong> @AppState.SimulationHistory.Parameters.MinMaxPayload.Item1 - @AppState.SimulationHistory.Parameters.MinMaxPayload.Item2 kg
        </div>
        <div class="col">
            <strong>No. of orders:</strong> @AppState.SimulationHistory.Parameters.NumberOfOrders
        </div>
        <div class="col">
            <strong>No. of vehicles:</strong> @AppState.SimulationHistory.Parameters.NumberOfVehicles
        </div>
    </div>
    
    <div class="row" style="margin-bottom: 20px">
        <div class="col">
            <table class="table table-sm">
                <thead>
                    <tr>
                        <th scope="col">Property</th>
                        <th scope="col">Value</th>
                        <th scope="col">Unit</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var property in typeof(Vehicle).GetProperties())
                    {
                        <tr>
                            <td>@property.Name.SplitCamelCase()</td>
                            <td>@(AppState.SimulationHistory?.Parameters?.VehicleTemplate != null ? property.GetValue(AppState.SimulationHistory.Parameters.VehicleTemplate) : string.Empty)</td>
                            @{
                                var customAttributes = property.GetCustomAttributes(typeof(DescriptionAttribute), true);
                                if (customAttributes.Any())
                                {
                                    <td>@(((DescriptionAttribute) customAttributes[0]).Description)</td>
                                }
                                else
                                {
                                    <td></td>
                                }
                            }
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>

    <div class="row" style="margin-bottom: 20px">
        <div class="col-12">
            <form class="form-inline">
                <div class="form-group pb-3" style="width: 100%">
                    <button type="button" class="btn btn-primary" style="margin-right: 10px" @onclick="PlayClicked">
                        @(_playing ? "Pause" : "Play")
                    </button>
                    <label for="steps" style="margin-right: 10px">@AppState.HistorySimulationStep/@(AppState.SimulationHistory.Steps.Count == 0 ? 0 : AppState.SimulationHistory.Steps.Count - 1)</label>
                    <input class="form-control" type="range" id="steps" style="flex: 1" min="0" max="@(AppState.SimulationHistory.Steps.Count - 1)" value="@AppState.HistorySimulationStep" @onchange="SimStepChanged">
                </div>
            </form>
        </div>
    </div>

    <div class="row" style="margin-bottom: 20px">
        <div class="col-4 border border-secondary">
            <div style="text-align: center">
                <strong>Vehicles</strong>
            </div>

            <Vehicles/>
        </div>
        <div class="col-4 border border-secondary">
            <div style="text-align: center">
                <strong>Open Orders</strong>
            </div>

            <OpenOrders/>
        </div>
        <div class="col-4 border border-secondary">
            <div style="text-align: center">
                <strong>Closed Orders</strong>
            </div>

            <ClosedOrders/>
        </div>
    </div>

    <div class="row" style="margin-bottom: 20px">
        <div class="col-12 border border-secondary">
            <div style="text-align: center">
                <strong>Map</strong>
            </div>

            <ResultsMap/>
        </div>
    </div>

    <div class="row" style="margin-bottom: 20px">
        <div class="col-12 border border-secondary">
            <div style="text-align: center">
                <strong>Graphs / Stats</strong>
            </div>
            
            <SimulationStats />
            <CompletedOrders />
        </div>
    </div>
</div>

@code {
    private bool _playing = false;

    protected override async Task OnInitializedAsync()
    {
        // Register app state changed event
        AppState.StateChanged += async (source, property) => await AppState_StateChanged(source, property);

        StartTimer();
    }

    private void StartTimer()
    {
        Timer.SetTimer(1000, repeat: true);
        Timer.OnElapsed += IncrementStep;
    }

    private void IncrementStep()
    {
        if (_playing)
        {
            if (AppState.HistorySimulationStep == AppState.SimulationHistory.Steps.Count - 1)
            {
                _playing = false;
            }
            else
            {
                AppState.UpdateSimulationStep(this, AppState.HistorySimulationStep + 1);
            }

            StateHasChanged();
        }
    }

    private void SimStepChanged(ChangeEventArgs e)
    {
        AppState.UpdateSimulationStep(this, int.Parse(e.Value.ToString()));
    }

    private void PlayClicked(MouseEventArgs e)
    {
        if (AppState.HistorySimulationStep == AppState.SimulationHistory.Steps.Count - 1)
        {
            AppState.UpdateSimulationStep(this, 0);
        }

        _playing = !_playing;
    }

    private async Task AppState_StateChanged(ComponentBase source, string property)
    {
        if (source != this)
        {
            await InvokeAsync(StateHasChanged);
        }
    }

    void IDisposable.Dispose()
    {
        AppState.StateChanged -= async (source, property) => await AppState_StateChanged(source, property);
        Timer?.Dispose();
    }
}
