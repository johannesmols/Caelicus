@inject AppState AppState
@implements IDisposable

<ul>
    @if (AppState.SimulationHistory.Steps.Count > 0)
    {
        foreach(var vehicle in AppState.SimulationHistory.Steps[AppState.HistorySimulationStep].Vehicles)
        {
            <li>
                @vehicle.State.ToString(): 
                @vehicle.CurrentVertexPosition to 
                @vehicle.Target
                (@vehicle.DistanceTraveled / @vehicle.DistanceToTarget)
            </li>
        }
    }
</ul>

@code {
    private Graph<VertexInfo, EdgeInfo> _graph = new Graph<VertexInfo, EdgeInfo>();

    protected override async Task OnInitializedAsync()
    {
        // Register app state changed event
        AppState.StateChanged += async (source, property) => await AppState_StateChanged(source, property);
    }

    private async Task AppState_StateChanged(ComponentBase source, string property)
    {
        if (source != this)
        {
            await InvokeAsync(StateHasChanged);
        }

        if (AppState.SimulationHistory?.Parameters?.JsonGraph != null)
        {
            _graph = new GraphImporterService().GenerateGraph(AppState.SimulationHistory.Parameters.JsonGraph);
        }
    }

    void IDisposable.Dispose()
    {
        AppState.StateChanged -= async (source, property) => await AppState_StateChanged(source, property);
    }
}
