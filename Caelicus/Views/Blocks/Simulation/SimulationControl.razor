@inject AppState AppState
@inject IJSRuntime JsRuntime
@implements IDisposable

<form class="form-inline">
    <div class="form-group pb-3" style="width: 100%">
        <label for="graph" style="margin-right: 10px">Graph:</label>
        <select class="form-control" style="flex: 1" id="graph" value="@AppState.Graphs.FirstOrDefault()?.Name" @onchange="SelectionChanged">
            @foreach (var graph in AppState.Graphs)
            {
                <option value="@graph.Name">@graph.Name</option>
            }
        </select>
    </div>
    <div class="form-group pb-3" style="width: 100%">
        <label for="speed" style="margin-right: 10px">Speed:</label>
        <input type="number" class="form-control" style="flex: 1" id="speed" value="@_simulationSpeed" step="0.1" min="1" @onchange="SimSpeedChanged" />
    </div>
    <div class="form-group pb-3" style="width: 100%">
        <label for="rnd_seed" style="margin-right: 10px">Random Seed:</label>
        <input type="number" class="form-control" style="flex: 1" id="rnd_seed" step="1" @bind="_randomSeed" />
    </div>
    <div class="form-group-pb3">
        <label>
            <input type="checkbox" style="margin-right: 5px" checked="@AppState.OnlyDownloadLastStep" @onchange="SwitchOnlyDownloadLastStep"/>Only download last step
        </label>
    </div>
</form>

<div class="row" style="position: absolute; bottom: 0; width: 100%; padding-bottom: 10px;">
    <div class="col-4 align-self-end">
        <button type="button" class="btn btn-success btn-block" disabled="@(_simulationRunning)" @onclick="StartSimulation">
            Start
        </button>
    </div>
    <div class="col-4 align-self-end">
        <button type="button" class="btn btn-danger btn-block" disabled="@(!_simulationRunning)" @onclick="StopSimulation">
            Stop
        </button>
    </div>
    <div class="col-4 align-self-end">
        <button type="button" class="btn btn-primary" style="width: 100%" disabled="@(!(!_simulationRunning && _results != null))" @onclick="DownloadResults">
            Save
            @if (_generatingZipFile)
            {
                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
            }
        </button>
    </div>
</div>

@code {
    private SimulationManager _simulationManager = new SimulationManager();
    private bool _simulationRunning = false;

    private JsonGraphRootObject _currentGraph;
    private string _currentGraphSelected = string.Empty;
    private double _simulationSpeed = 1d;
    private int _randomSeed = Guid.NewGuid().GetHashCode();

    private List<SimulationHistory> _results;
    private bool _generatingZipFile;

    protected override async Task OnInitializedAsync()
    {
        // Register app state changed event
        AppState.StateChanged += async (source, property) => await AppState_StateChanged(source, property);
    }

    private void SelectionChanged(ChangeEventArgs e)
    {
        _currentGraphSelected = e.Value.ToString();
        _currentGraph = AppState.Graphs.FirstOrDefault(x => x.Name == _currentGraphSelected);
    }

    private void SimSpeedChanged(ChangeEventArgs e)
    {
        var newValue = float.Parse(e.Value.ToString());
        if (newValue >= 1)
        {
            _simulationSpeed = newValue;
        }
    }

    private void SwitchOnlyDownloadLastStep(ChangeEventArgs e)
    {
        if (e.Value is bool isChecked)
        {
            AppState.UpdateOnlyDownloadLastStep(this, isChecked);
        }
    }

    private async Task StartSimulation(MouseEventArgs e)
    {
        _results?.Clear();

    // Add the different simulation scenarios
        foreach (var (vehicle, enabled, min, max, step) in AppState.Vehicles)
        {
            if (!enabled)
                continue;

            for (var i = min; i <= max; i += step)
            {
                if (i <= 0)
                {
                    continue;
                }

                _simulationManager.AddSimulation(new SimulationParameters()
                {
                    SimulationIdentifier = Guid.NewGuid(),
                    RandomSeed = _randomSeed,
                    JsonGraph =  _currentGraph ?? AppState.Graphs.FirstOrDefault(),
                    Graph = GraphImporterService.GenerateGraph(_currentGraph ?? AppState.Graphs.FirstOrDefault()),
                    VehicleTemplate = vehicle,
                    NumberOfVehicles = i,
                    SimulationSpeed = _simulationSpeed,
                    NumberOfOrders = AppState.NumberOfOrders,
                    MinMaxPayload = AppState.MinMaxPayload
                });
            }
        }

        // Register simulation update event
        _simulationManager.Simulations.ForEach(s => s.Item2.ProgressChanged += SimulationUpdate);

        // Start the simulations
        _simulationRunning = true;
        _results = await _simulationManager.StartSimulations();
        AppState.UpdateSimulationHistoryList(this, _results);
        _simulationRunning = false;
    }

    private async Task StopSimulation(MouseEventArgs e)
    {
        _simulationRunning = false;
        _results = await _simulationManager.StopSimulations();
        AppState.UpdateSimulationHistoryList(this, _results);
    }

    public void SimulationUpdate(object sender, SimulationProgress progress)
    {
        var simUpdates = AppState.SimulationUpdates;
        simUpdates += $"{progress.SimulationIdentifier}: {progress.Message}{ Environment.NewLine }";
        AppState.UpdateSimulationUpdates(this, simUpdates);
    }

    /// <summary>
    /// Download results of all simulations to a ZIP file containing a JSON file for each simulation
    /// </summary>
    /// <returns></returns>
    private async Task DownloadResults()
    {
        if (_results != null)
        {
            _generatingZipFile = true;

            try
            {
                await Task.Run(async () =>
                {
                    var values = _results.ToDictionary(
                        result => result.Parameters.SimulationIdentifier.ToString(),
                        result => JsonConvert.SerializeObject(
                            new SimulationHistory(result.Parameters)
                            {
                                Steps = AppState.OnlyDownloadLastStep ? 
                                    new List<SimulationHistoryStep>() { result.Steps.LastOrDefault() } : result.Steps
                            }, 
                            new JsonSerializerSettings() {ReferenceLoopHandling = ReferenceLoopHandling.Ignore}));

                    var archive = FileUtilities.CreateZipFile(values);
                    await FileUtilities.SaveAs(JsRuntime, "results.zip", archive);
                });
            }
            catch (Exception e)
            {
                Console.WriteLine($"Error while saving results to file. Exception: {e.Message}");
            }
            finally
            {
                _generatingZipFile = false;
            }
        }
    }

    private async Task AppState_StateChanged(ComponentBase source, string property)
    {
        if (source != this)
        {
            await InvokeAsync(StateHasChanged);
        }
    }

    void IDisposable.Dispose()
    {
        AppState.StateChanged -= async (source, property) => await AppState_StateChanged(source, property);
    }
}
