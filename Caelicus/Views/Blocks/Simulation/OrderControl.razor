@inject AppState AppState
@implements IDisposable

<form class="form-inline">
    <div class="form-group pb-3" style="width: 100%">
        <label for="orders" style="margin-right: 10px">Orders:</label>
        <input type="number" class="form-control" style="flex: 1" id="orders" value="@_orders" step="1" min="1" @onchange="OrdersChanged" />
    </div>
</form>

<div class="form-group pb-3" style="width: 100%">
    <div class="row no-gutters">
        <div class="col" style="padding: 0 5px">
            <label for="minPayload" style="margin-right: 10px">Min Payload:</label>
            <input type="number" id="minPayload" class="form-control" placeholder="Minimum" min="0.01" max="@int.MaxValue" value="0.1" step="0.1" @onchange="PayloadMinChanged"/>
        </div>
        <div class="col" style="padding: 0 5px">
            <label for="maxPayload" style="margin-right: 10px">Max Payload:</label>
            <input type="number" id="maxPayload" class="form-control" placeholder="Maximum" min="0.01" max="@int.MaxValue" value="5" step="0.1" @onchange="PayloadMaxChanged"/>
        </div>
    </div>
</div>

<form class="form-inline">
    <div class="form-group pb-3" style="width: 100%">
        <label for="simultOrders" style="margin-right: 10px">Simultaneous Orders:</label>
        <input type="number" class="form-control" style="flex: 1" id="simultOrders" value="@_simtOrders" step="1" min="1" @onchange="SimtOrdersChanged" />
    </div>
</form>

@code {
    private int _orders = 100;
    private int _simtOrders = 1;

    protected override async Task OnInitializedAsync()
    {
        // Register app state changed event
        AppState.StateChanged += async (source, property) => await AppState_StateChanged(source, property);
    }

    private void OrdersChanged(ChangeEventArgs e)
    {
        var newValue = int.Parse(e.Value.ToString());
        if (newValue >= 1)
        {
            _orders = newValue;
            AppState.UpdateNumberOfOrders(this, _orders);
        }
    }

    private void SimtOrdersChanged(ChangeEventArgs e)
    {
        var newValue = int.Parse(e.Value.ToString());
        if (newValue >= 1)
        {
            _simtOrders = newValue;
            AppState.UpdateSimultaneousOrders(this, _simtOrders);
        }
    }

    private void PayloadMinChanged(ChangeEventArgs e)
    {
        AppState.UpdateMinMaxPayload(this, Tuple.Create(double.Parse(e.Value?.ToString() ?? "0"), AppState.MinMaxPayload.Item2));
    }

    private void PayloadMaxChanged(ChangeEventArgs e)
    {
        AppState.UpdateMinMaxPayload(this, Tuple.Create(AppState.MinMaxPayload.Item1, double.Parse(e.Value?.ToString() ?? "0")));
    }

    private async Task AppState_StateChanged(ComponentBase source, string property)
    {
        if (source != this)
        {
            await InvokeAsync(StateHasChanged);
        }
    }

    void IDisposable.Dispose()
    {
        AppState.StateChanged -= async (source, property) => await AppState_StateChanged(source, property);
    }
}
