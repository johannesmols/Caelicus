@inject AppState AppState
@using Caelicus.Simulation
@implements IDisposable

<form class="form-inline">
    <div class="form-group pb-3" style="width: 100%">
        <label for="graph" style="margin-right: 10px">Graph:</label>
        <select class="form-control" style="flex: 1" id="graph" value="@AppState.Graphs.FirstOrDefault()?.Name" @onchange="SelectionChanged">
            @foreach (var graph in AppState.Graphs)
            {
                <option value="@graph.Name">@graph.Name</option>
            }
        </select>
    </div>
    <div class="form-group pb-3" style="width: 100%">
        <label for="speed" style="margin-right: 10px">Speed:</label>
        <input type="number" class="form-control" style="flex: 1" id="speed" value="@_simulationSpeed" step="0.1" min="1" @onchange="SimSpeedChanged" />
    </div>
</form>

<div class="row" style="position: absolute; bottom: 0; width: 100%; padding-bottom: 10px;">
    <div class="col-4 align-self-end">
        <button type="button" class="btn btn-success btn-block" disabled="@(_simulationRunning)" @onclick="StartSimulation">
            Start
        </button>
    </div>
    <div class="col-4 align-self-end">
        <button type="button" class="btn btn-warning btn-block" disabled="@(!_simulationRunning)" @onclick="PauseSimulation">
            Pause
        </button>
    </div>
    <div class="col-4 align-self-end">
        <button type="button" class="btn btn-danger btn-block" disabled="@(!_simulationRunning)" @onclick="StopSimulation">
            Stop
        </button>
    </div>
</div>

@code {
    private bool _simulationRunning = false;

    private JsonGraphRootObject _currentGraph;
    private string _currentGraphSelected = string.Empty;
    private float _simulationSpeed = 1f;

    protected override async Task OnInitializedAsync()
    {
        // Register app state changed event
        AppState.StateChanged += async (source, property) => await AppState_StateChanged(source, property);
    }

    private void SelectionChanged(ChangeEventArgs e)
    {
        _currentGraphSelected = e.Value.ToString();
        _currentGraph = AppState.Graphs.FirstOrDefault(x => x.Name == _currentGraphSelected);
    }

    private void SimSpeedChanged(ChangeEventArgs e)
    {
        var newValue = float.Parse(e.Value.ToString());
        if (newValue >= 1)
        {
            _simulationSpeed = float.Parse(e.Value.ToString());
        }
    }

    private void StartSimulation(MouseEventArgs e)
    {
        var parameters = new SimulationParameters
        {
            Graph = new GraphImporterService().GenerateGraph(_currentGraph ?? AppState.Graphs.FirstOrDefault()),
            Vehicles = AppState.Vehicles,
            SimulationSpeed = _simulationSpeed
        };

        // Start the simulation

        _simulationRunning = true;
    }

    private void PauseSimulation(MouseEventArgs e)
    {
        _simulationRunning = false;
    }

    private void StopSimulation(MouseEventArgs e)
    {
        _simulationRunning = false;
    }

    private async Task AppState_StateChanged(ComponentBase source, string property)
    {
        if (source != this)
        {
            await InvokeAsync(StateHasChanged);
        }
    }

    void IDisposable.Dispose()
    {
        AppState.StateChanged -= async (source, property) => await AppState_StateChanged(source, property);
    }
}
