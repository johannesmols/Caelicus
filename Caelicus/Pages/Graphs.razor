@page "/graphs"
@inject AppState AppState
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@implements IDisposable

<div class="container-fluid">
    <div class="row" style="margin-bottom: 20px">
        <div class="col-md-10">
            <select class="form-control" value="@AppState.Graphs.FirstOrDefault()?.Name" @onchange="SelectionChanged">
                @foreach (var graph in AppState.Graphs)
                {
                    <option value="@graph.Name">@graph.Name</option>
                }
            </select>
        </div>
        <div class="col-md-1">
            <button type="button" class="btn btn-secondary btn-block" @onclick="SaveClicked">Save</button>
        </div>
        <div class="col-md-1">
            <button type="button" class="btn btn-secondary btn-block" @onclick="NewClicked">New</button>
        </div>
    </div>
    <div class="row">
        <div class="col-md-6">
            <textarea @bind="_editorText" class="form-control" style="min-width: 100%; min-height: 100%; font-family: monospace"></textarea>
        </div>
        <div class="col-md-6">
            <GoogleMap @ref="@_map" Id="map1" Options="@_mapOptions" OnAfterInit="@OnAfterInitAsync"></GoogleMap>
        </div>
    </div>
</div>

@code {
    private LocalStorageService _localStorageService;

    private GoogleMap _map;
    private MapOptions _mapOptions;
    private bool _mapLoaded;

    private JsonRootObject _currentGraph;
    private string _currentSelected = string.Empty;
    private string _editorText = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        // Register app state changed event
        AppState.StateChanged += async (source, property) => await AppState_StateChanged(source, property);

        _localStorageService = new LocalStorageService(LocalStorage);

        _mapOptions = new MapOptions()
        {
            Zoom = 13,
            Center = new LatLngLiteral()
            {
                Lat = 55.786334,
                Lng = 12.523281
            },
            MapTypeId = MapTypeId.Roadmap,
            StreetViewControl = false
        };

        // Load JSON of first element
        _currentSelected = AppState.Graphs.FirstOrDefault()?.Name;
        await LoadGraphInEditor(_currentSelected);
        await LoadGraphInMap(AppState.Graphs.FirstOrDefault(x => x.Name == _currentSelected));
    }

    private async Task SelectionChanged(ChangeEventArgs e)
    {
        _currentSelected = e.Value.ToString();
        await LoadGraphInEditor(e.Value.ToString());
    }

    private async Task LoadGraphInEditor(string name)
    {
        var graph = AppState.Graphs.FirstOrDefault(x => x.Name == name);
        _currentGraph = graph;
        _editorText = JsonConvert.SerializeObject(graph, Formatting.Indented);
        await LoadGraphInMap(_currentGraph);
    }

    private async Task LoadGraphInMap(JsonRootObject graph)
    {
        if (graph != null)
        {
            while (!_mapLoaded)
            {
                await Task.Delay(500);
            }

            await MapRenderService.RenderMap(_map, new GraphImporterService().GenerateGraph(graph));
        }
    }

    private async Task SaveClicked(MouseEventArgs e)
    {
        try
        {
            var graph = (JsonRootObject) JsonConvert.DeserializeObject(_editorText, typeof(JsonRootObject));
            await _localStorageService.WriteGraphsToLocalStorage(new List<JsonRootObject>() { graph });
            ModifyAppState(graph);
        }
        catch (Exception)
        {
            Console.WriteLine("Error while parsing JSON from editor field, please verify schema.");
        }
    }

    private void NewClicked(MouseEventArgs e)
    {
        _editorText = JsonConvert.SerializeObject(new JsonRootObject(), Formatting.Indented);
    }

    private void ModifyAppState(JsonRootObject graph)
    {
        var appStateCopy = AppState.Graphs;
        var index = appStateCopy.FindIndex(i => i.Name == graph.Name);
        if (index > -1)
        {
            appStateCopy[index] = graph;
        }
        else
        {
            appStateCopy.Add(graph);
        }
        AppState.UpdateGraphs(this, appStateCopy);
    }

    private void OnAfterInitAsync()
    {
        _mapLoaded = true;
    }

    private async Task AppState_StateChanged(ComponentBase source, string property)
    {
        if (source != this)
        {
            await InvokeAsync(StateHasChanged);
        }
    }

    void IDisposable.Dispose()
    {
        AppState.StateChanged -= async (source, property) => await AppState_StateChanged(source, property);
    }
}
