@inject AppState AppState
@inject HttpClient Http

<div class="container-fluid">
	<div class="row" style="margin-bottom: 2px">
		<div class="col-auto">
			<select class="form-control" value="@VehiclesTemplates.FirstOrDefault()?.Name" @onchange="SelectionChanged">
				@foreach (var template in VehiclesTemplates)
				{
					<option value="@template.Name">@template.Name</option>
				}
			</select>
		</div>
		<div class="col-auto">
			<button type="button" class="btn btn-secondary btn-block" @onclick="AddClicked">Add Template</button>
		</div>
	</div>
</div>
@foreach(var veh in Vehicles)
{
	<table class="table table-sm table-bordered">
		<thead>
			<tr>
				<th scope="col" width="100%">
					<input type="checkbox" @bind="veh.isActive" />
					<input type="text" @bind="@veh.Name" />
					<button type="button" class="btn btn-secondary btn-block" @onclick="() => RemClicked(veh.GetHashCode())">Remove</button>
				</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td width="100%">
					Transport Speed:
					<input type="number" step="any" @bind="veh.Speed"/>
				</td>
			</tr>
			<tr>
				<td width="100%">
					Maximum Payload:
					<input type="number" step="any" @bind="veh.MaxPayload" />
				</td>
			</tr>
			<tr>
				<td width="100%">
					Cost Per Km:
					<input type="number" step="any" @bind="veh.CostPerKm" />
				</td>
			</tr>
			<tr>
				<td width="100%">
					Movement Penalty:
					<input type="number" step="any" @bind="veh.MovementPenalty" />
				</td>
			</tr>
		</tbody>
	</table>
}

	@code {
        [Parameter]
        public List<Vehicle> Vehicles { get; set; } = new List<Vehicle>();
        [Parameter]
        public List<Vehicle> VehiclesTemplates { get; set; } = new List<Vehicle>();
        private string _templateSelection = string.Empty;

        private async Task SelectionChanged(ChangeEventArgs e)
        {
            _templateSelection = e.Value.ToString();
        }

        private async Task AddClicked(MouseEventArgs e)
        {
            if(_templateSelection == string.Empty)
            {
				_templateSelection = VehiclesTemplates.FirstOrDefault()?.Name;
            }
            foreach(var temp in VehiclesTemplates)
            {
                if (temp.Name == _templateSelection)
                {
                    Vehicles.Add(temp.copy());
                    break;
                }
            }
        }

        private async Task RemClicked(int id)
        {
            Vehicles.RemoveAll((temp) => temp.GetHashCode() == id);
        }
	}
